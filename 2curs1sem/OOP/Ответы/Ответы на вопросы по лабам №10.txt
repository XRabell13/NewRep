1. На какие основные виды/типы делятся все коллекции .NET? Охарактеризуйте каждый из них.  
В среде .NET Framework поддерживаются пять типов коллекций:
 необобщенные, специальные, с поразрядной организацией, обобщенные и параллельные. 

Необобщенные коллекции 

Реализуют ряд основных структур данных, включая динамический массив, стек, очередь,
а также словари, в которых можно хранить пары "ключ-значение".
В отношении необобщенных коллекций важно иметь в виду следующее: они оперируют данными типа object.
Таким образом, необобщенные коллекции могут служить для хранения данных любого типа, причем в одной коллекции 
допускается наличие разнотипных данных. Очевидно, что такие коллекции не типизированы, поскольку в них хранятся
ссылки на данные типа object. Классы и интерфейсы необобщенных коллекций находятся в пространстве имен 
System.Collections. 

Специальные коллекции 

Оперируют данными конкретного типа или же делают это каким-то особым образом. Например, имеются специальные коллекции для символьных строк, 
а также специальные коллекции, в которых используется однонаправленный список. Специальные коллекции объявляются в пространстве имен System.Collections.Specialized. 

Поразрядная коллекция 

В прикладном интерфейсе Collections API определена одна коллекция с поразрядной организацией — это BitArray. 
Коллекция типа BitArray поддерживает поразрядные операции, т.е. операции над отдельными двоичными разрядами, например И, ИЛИ, исключающее ИЛИ, а следовательно, 
она существенно отличается своими возможностями от остальных типов коллекций. Коллекция типа BitArray объявляется в пространстве имен System.Collections. 

Обобщенные коллекции

 Обеспечивают обобщенную реализацию нескольких стандартных структур данных, включая связные списки, стеки, очереди и словари.
 Такие коллекции являются типизированными в силу их обобщенного характера. Это означает, что в обобщенной коллекции могут храниться только такие элементы данных, 
которые совместимы по типу с данной коллекцией. Благодаря этому исключается случайное несовпадение типов. Обобщенные коллекции объявляются в пространстве именSystem.Collections.Generic. 

Параллельные коллекции

Поддерживают многопоточный доступ к коллекции. Это обобщенные коллекции, определенные в пространстве имен System.Collections.Concurrent. 


2. Что такое generic-коллекции? Назовите примеры известных вам generic-коллекций.  
В C# коллекция представляет собой совокупность объектов. В среде .NET Framework имеется немало интерфейсов и классов, в которых определяются и реализуются различные типы коллекций. 
Главное преимущество коллекций заключается в том, что они стандартизируют обработку групп объектов в программе. Все коллекции разработаны на основе набора четко определенных интерфейсов.
Некоторые встроенные реализации таких интерфейсов, в том числе ArrayList, Hashtable, Stack и Queue, могут применяться в 
исходном виде и без каких-либо изменений. Имеется также возможность реализовать собственную коллекцию, хотя потребность в этом возникает редко. 

3. В чем разница между ArrayList и Array?  

Главное отличие между Array и ArrayList заключается в том, что Array - это структура данных фиксированной длины, а ArrayList - класс Collection переменной длины.
Основное различие между Array и ArrayList заключается в том, что массив хранит данные одного типа данных, тогда как списки массивов могут хранить данные разных типов.

4. Охарактеризуйте коллекции, которые вы использовали в своем варианте. 

Stack<T> Создает стек. Обеспечивает такие же функциональные возможности, как и необобщенный класс Stack.

5. Чем отличаются коллекции, расположенные в пространстве имен System.Collections.Concurrent?

 Прострнатсов имет содержит коллекции, которые являются потокобезопасными и специально предназначены для параллельного программирования. 
 Т.е. к коллекциям данного пространства имен может обращаться одновременно несколько потоков.

6. Какое пространство имен необходимо подключить в проект, чтобы иметь возможность использовать generic-коллекции? 
using System.Collections.Generic;
 
7. Что такое наблюдаемая коллекция? Как ее можно использовать?  

Если нужна информация о том, когда элементы коллекции удаляются или добавляются, можно использовать класс ObservableCollection<T>. 
Этот класс был определен для WPF и предназначен для того, чтобы пользовательский интерфейс мог получать информацию об изменениях коллекции. 
По этой причине он включен в сборку WindowsBase, следовательно, на нее необходимо сослаться. Пространство имен этого класса — System.Collections.ObjectModel.

Класс ObservableCollection<T> унаследован от базового класса Collection<T>, который может применяться для создания специальных коллекций; 
он использует внутри себя List<T>. Методы базового класса SetItem() и RemoveItem() переопределены для инициации события CollectionChanged. 
Клиенты этого класса могут регистрироваться на это событие, используя интерфейс INotifyCollectionChanged.

Наблюдаемая коллекция - специальный класс с помощью которого можно отслеживать изменения в связанных с ним коллекций. 

8. Охарактеризуйте интерфейсы IEnumerator, IEnumerable. В чем отличие назначений интерфейсов IEnumerator и IEnumerable. 
IEnumerable<T> Определяет обобщенный метод GetEnumerator(), предоставляющий перечислитель для любого класса коллекции.
IEnumerator<T> Предоставляет методы, позволяющие получать содержимое коллекции по очереди.
Основополагающим для всех коллекций является понятие перечислителя, который поддерживается в необобщенных интерфейсах IEnumerator и IEnumerable, а также в обобщенных 
интерфейсах IEnumerator<T> и IEnumerable<T>. 
Перечислитель обеспечивает стандартный способ поочередного доступа к элементам коллекции. 
Следовательно, он перечисляет содержимое коллекции. В каждой коллекции должна быть реализована обобщенная или необобщенная форма интерфейса IEnumerable, 
поэтому элементы любого класса коллекции должны быть доступны посредством методов, определенных в интерфейсе IEnumerator или IEnumerator<T>. 
Это означает, что, внеся минимальные изменения в код циклического обращения к коллекции одного типа, его можно использовать для аналогичного обращения к коллекции другого типа. 
Любопытно, что для поочередного обращения к содержимому коллекции в цикле foreach используется перечислитель

9.  Поясните принцип работы коллекций: 
a) Stack<T>
Создает стек. Обеспечивает такие же функциональные возможности, как и
необобщенный класс Stack
b) Queue<T>
Создает очередь. Обеспечивает такие же функциональные возможности, как и
необобщенный класс Queue
c) HashSet<T>
	Сохраняет ряд уникальных значений, используя хештаблицу
d) List<T>
	Создает динамический массив. Обеспечивает такие же функциональные
возможности, как и необобщенный класс ArrayList
e) Dictionary<Tkey, TValue>
	Сохраняет пары "ключ-значение". Обеспечивает такие же функциональные
возможности, как и необобщенный класс Hashtable
f) LinkedList<T>
	Сохраняет элементы в двунаправленном списке
g) SortedDictionary<TKey, TValue>
	Создает отсортированный список из пар "ключ-значение"
h) SortedList<TKey, TValue>
	Создает отсортированный список из пар "ключ-значение". Обеспечивает такие
же функциональные возможности, как и необобщенный класс SortedList
i) SortedSet<T>
	Создает отсортированное множество.