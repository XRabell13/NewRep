1. Расскажите как генерируется исключение.
С помощью ключевого слова throw.

if (b==0)
	 throw new Exception("Zero devision"); 
else
	 c = a / b;

или

try
{
if (i > 255) // Генерируем исключение
 throw new OverflowException(); }

2. Расскажите методику обработки исключений.
Механизм
1) Исключение не произошло
1.1. try  выполняем до конца
1.2. catch пропускаем
1.3. finally выполняем
2) Исключение произошло
2.1. выполнение try прекращается (все что идет за возникшим исключение игнорируется)
2.2 ищем блок catch на соответствие по  типу исключения
2.2.1. если нет catch
2.2.1.1 разматывает стек, локальные объекты, выходят из области видимости
2.2.1.2 снова генерируется исключение в точке вызова метода
2.2.1.3. если  блока не найдено, то сообщение необработанное исключении дальнейшее выполнение программы останавливается
2.2.2 сatch найден
2.2.2.1 Передается управление ближайшему catch-обработчику, совместимому с типом выброшенного исключения
2.2.2.2. объект-исключения передается, если это предусмотрено, обработчику в качестве параметра.
2.3. переходим/ищем finally
2.3.1. если нет finnaly
2.3.1.1.выполнение программы  продолжается начиная с позиции , след. за последним обработчиком данного блока try

3. Какое ключевое слово служит для обозначения блока кода, в котором можно генерировать исключение?
try


4. Какие ключевые слова используются  для обработки и генерации исключений? Расскажите об механизме обработке исключения?
►try – контролируемый блок
►throw - генерация искл. ситуации внутри try
►catch – обработчики исключений, идут за try (несколько) 
►finally - код, очищающий ресурсы и др. действия (выполняется всегда) (один на один try)

5. Что будет, если в программе нет предложения catch, способного обработать исключение?
Программа аварийно завершится, если есть try…finally, и не запустится вовсе, если нет ни catch, ни finally.

6. Что такое фильтры исключения? Приведите пример
Фильтр исключения позволяет указать дополнительные условия, при которых используется обработчик  исключения. Эти условия принимают форму булева выражения, перед которым  ставится ключевое слово when.
Фильтр исключения — дополнительное условие для срабатывания обработки исключения.

7. Могут ли исключения быть вложенными?
В try да.

8. Какой синтаксис нужно использовать в C# для отлова любого возможного исключения?
Try(){}
catch{}


9. Чем следует руководствоваться при размещении обработчиков исключения?
Их свойствами и правилами, например:
►try  могут быть вложенные
►более специфичные исключения обрабатываются первыми 
►Свои классы исключений должны наследоваться от System.Exсeption или System.ApplicationException 
►может иметь одну конструкцию catch без аргументов ( нежелательно) 
►finally выполняется всегда 
► ( не выполняется в случае выброса StackOverflowException или System.exit(0)) ►используйте блоки finally 
►Может быть трансляция исключения 
►при использовании инструкций lock, using и foreach блоки try/finally создаются автоматически 
►Генерация исключений в finally нежелательно код восстановления или очистки будет выполнен не полностью 
► процедура обработки исключений медленная

10. Что будет выведено на консоль в результате выполнения фрагмента листинга? static void Main(string[] args)         {             string[] str = new string[5];             try             {                 str[4] = "anything";                 Console.WriteLine("It's OK");             }             catch (IndexOutOfRangeException e) {                 Console.WriteLine("IndexOutOfRangeException"); }             catch (Exception e)             {                 Console.WriteLine("Exception");             }           } }

It’s OK

11. Как повторно сгенерировать то же самое исключение в блоке обработчике catch?
Пример кода: 

int getIntValueFromDatabase(Database *d, std::string table, std::string key)
{
    assert(d);

    try
    {
        return d->getIntValue(table, key); // генерируется исключение типа int
    }
    catch (int exception)
    {
        // Записываем ошибку в лог-файл
        g_log.logError("doSomethingImportant failed");

        throw 'q'; // генерируется исключение 'q' типа char, которое будет обрабатывать caller функции getIntValueFromDatabase()
    }
}
В примере, приведенном выше, программа ловит исключение типа int из getIntValue(), записывает ошибку в лог-файл, а затем выбрасывает новое исключение со значением q типа char. Хотя генерация исключения в блоке catch может показаться странной затеей, это не запрещено. Помните, что только исключения, сгенерированные в блоке try, могут быть перехвачены блоком catch. Это означает, что исключение, сгенерированное в блоке catch, не будет перехвачено блоком catch, в котором оно находится. Вместо этого стек начнет раскручиваться и исключение будет передано caller-у, который находится на уровне выше в стеке вызовов.
Исключение, сгенерированное в блоке catch, может быть исключением любого типа — оно не обязательно должно быть того же типа, что и исключение, которое обрабатывает блок catch.


12. .Какие методы содержаться в классе Exception? Где и как их можно использовать? 

Базовым для всех типов исключений является тип Exception. Этот тип определяет ряд свойств, с помощью которых можно получить информацию об исключении.
    • InnerException: хранит информацию об исключении, которое послужило причиной текущего исключения
    • Message: хранит сообщение об исключении, текст ошибки
    • Source: хранит имя объекта или сборки, которое вызвало исключение
    • StackTrace: возвращает строковое представление стека вызывов, которые привели к возникновению исключения
    • TargetSite: возвращает метод, в котором и было вызвано исключение
Однако так как тип Exception является базовым типом для всех исключений, то выражение catch (Exception ex) будет обрабатывать все исключения, которые могут возникнуть.
Но также есть более специализированные типы исключений, которые предназначены для обработки каких-то определенных видов исключений. Их довольно много, я приведу лишь некоторые:
    • DivideByZeroException: представляет исключение, которое генерируется при делении на ноль
    • ArgumentOutOfRangeException: генерируется, если значение аргумента находится вне диапазона допустимых значений
    • ArgumentException: генерируется, если в метод для параметра передается некорректное значение
    • IndexOutOfRangeException: генерируется, если индекс элемента массива или коллекции находится вне диапазона допустимых значений
    • InvalidCastException: генерируется при попытке произвести недопустимые преобразования типов
    • NullReferenceException: генерируется при попытке обращения к объекту, который равен null (то есть по сути неопределен)
