1. Что такое сериализация, десериализация? 
Сериализация представляет процесс преобразования какого-либо объекта в поток байтов.
 После преобразования мы можем этот поток байтов или записать на диск или сохранить его временно в памяти. 
А при необходимости можно выполнить обратный процесс - десериализацию, то есть получить из потока байтов ранее сохраненный объект.

2. Какие существуют форматы сериализации? Поясните структуру для каждого формата. Какие классы для работы с ними существуют в .NET?
Какие классы для работы с ними существуют в .NET?
Бинарный, SOAP, xml, JSON
Для каждого формата предусмотрен свой класс: 
для сериализации в бинарный формат - класс BinaryFormatter, 
для формата SOAP - класс SoapFormatter, 
для xml - XmlSerializer, 
для json - DataContractJsonSerializer.

3. Какие классы существуют в пространстве имен System.Xml? 
Их очень много. Некоторые из них: 
NameTable	
Реализует однопотоковый объект XmlNameTable.
UniqueId	
Уникальный идентификатор, оптимизированный для GUID.
XmlAttribute	
Представляет атрибут. Допустимые значения и значения по умолчанию для атрибута определены в определении типа документа (DTD) или схеме.
XmlAttributeCollection	
Представляет коллекцию атрибутов, к которым можно обращаться по имени или индексу.
XmlBinaryReaderSession	
Обеспечивает динамическое управление оптимизированными строками
XmlBinaryWriterSession	
Позволяет использовать динамический словарь для сжатия общих строк, присутствующих в сообщении и сохраняющих состояние.
XmlCDataSection	
Представляет раздел CDATA.
XmlCharacterData	
Предоставляет методы обработки текста, которые используются несколькими классами.
XmlComment	
Представляет содержимое комментария XML.
XmlConvert	
Кодирует и декодирует имена XML и предоставляет методы для преобразования между типами общеязыковой среды выполнения и типами языков определения схем XML (XSD). При преобразовании типов данных возвращаемые значения не зависят от языкового стандарта.
XmlDataDocument	
Обеспечивает хранение, получение и управление структурированными данными с использованием реляционного объекта DataSet.
XmlDeclaration	
Представляет узел объявления XML <?xml version='1.0'...?>.
XmlDictionary	
Реализует словарь, используемый для оптимизации реализаций модулей чтения и записи XML в Windows Communication Foundation (WCF).
XmlDictionaryReader	
Класс abstract, который Windows Communication Foundation (WCF) наследует от XmlReader для выполнения сериализации и десериализации.
XmlDictionaryReaderQuotas	
Содержит настраиваемые значения квоты для XmlDictionaryReaders.
XmlDictionaryString	
Представляет запись, которая хранится в XmlDictionary.
XmlDictionaryWriter	
Представляет абстрактный класс, который Windows Communication Foundation (WCF) наследует от XmlWriter для выполнения сериализации и десериализации.
XmlDocument	
Представляет XML-документ. Этот класс можно использовать для загрузки, проверки, изменения, добавления и размещения XML-кода в документе.
Остальные можно посмотреть, перейдя по ссылке https://docs.microsoft.com/ru-ru/dotnet/api/system.xml?view=netframework-4.8


4. Какие атрибуты используются для настройки XML сериализации? 
Настройка XML-сериализации может быть выполнена при помощи атрибутов. [XmlRoot] применяется к типу и задаёт корневой элемент в XML-файле.
При помощи [XmlElement] настраивается имя и пространство имён XML-элемента.
[XmlAttribute] используется, если член класса требуется сохранить в виде XMLатрибута.
Поля и свойства, которые не должны сохраняться, помечаются атрибутом [XmlIgnore].
Если тип содержит коллекцию объектов, то настройка имени этой коллекции и имени отдельного элемента выполняется при помощи атрибутов [XmlArray] и [XmlArrayItem].

5. В чем отличие BinaryFormatter или SoapFormatter? 
BinaryFormatter сериализует состояние объекта в поток, используя двоичный формат.
SoapFormatter сохраняет состояние объекта в виде сообщения SOAP (стандартный XML-формат для передачи и приема сообщений от веб-служб). 


6. Что такое сериализация контрактов данных, контракт данных? 
Контракт данных – это тип (класс или структура), объект которого описывает информационный фрагмент (открытые поля и свойства) - один из механизмов сериализации.
Для выполнения сериализации контракта данных используются классы:
1.DataContractSerializer – сериализует контракт в формате XML;
2.NetDataContractSerializer – сериализует данные и тип контракта;
3.DataContractJsonSerializer – сериализует контракт в формате JSON.

7. Где и для чего используются атрибуты [OnSerializing], [OnSerialized], [OnDeserializing], [OnDeserialized]? 
Если нужна особая инициализация объекта и восстановление несохраненных полей [OnSerializing], [OnSerialized], [OnDeserializing], [OnDeserialized],
вызываются CLR автоматически до([OnSerializing], [OnSerialized]) и после([OnDeserializing], [OnDeserialized]) сериализации или десериализации.

8. Что такое XPath? Приведите пример. 
Язык запросов к элементам XML-документа. 
В XPath существует семь видов узлов: 
элемент, атрибут, текст, пространство имён, инструкции обработки, комментарии и узлы документа. XML-документы обрабатываются в виде деревьев узлов.
Верхний элемент дерева называется корневым элементом. 

9. Какие возможности дает LINQ to Xml. Приведите примеры 
Еще один подход к работе с Xml представляет технология LINQ to XML. Вся функциональность LINQ to XML содержится в пространстве имен System.Xml.Linq. Рассмотрим основные классы этого пространства имен:
    • XAttribute: представляет атрибут xml-элемента
    • XComment: представляет комментарий
    • XDocument: представляет весь xml-документ
    • XElement: представляет отдельный xml-элемент
Ключевым классом является XElement, который позволяет получать вложенные элементы и управлять ими. Среди его методов можно отметить следующие:
    • Add(): добавляет новый атрибут или элемент
    • Attributes(): возвращает коллекцию атрибутов для данного элемента
    • Elements(): возвращает все дочерние элементы данного элемента
    • Remove(): удаляет данный элемент из родительского объекта
    • RemoveAll(): удаляет все дочерние элементы и атрибуты у данного элемента